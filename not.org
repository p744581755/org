*               
  DEADLINE: <2021-07-29     >
*
DEADLINE: <2021-07-30     >

* bbk_sdk
  SCHEDULED: <2021-08-02    >

** words

*** verify     


*** rountine       

*** unregistered       

*** provision              

*** reassemb         

** code

*** BRR_TYPE_ADV    BRR_TYPE_PB_ADV       s
    [file:d:/org_phone/PB.png]    ]]

*** blebrr_gatt_send ==  bearer->info.bearer_send  blebrr_gatt_send

*** SAR  MESH_GATT_SAR_STAR    

*** gatt_tx_pdu[0]                   

****     [[file:d:/org_phone/gatt_tx_pdu\[0\].png][    ]]

*         
  SCHEDULED: <2021-08-03    >

**                                                    I/o         

**                       

***                                                                    

***                                                                   

***                                                                         

***                                                                                            

***                                                                                               

***         cpu                                                                                      
                         

*** task_struct(                    )             clone             linux                              

***                                                                          LWP

***                                 

* words

** revert

** arithmetic     

** specification     

** capability     

** claimed          

* bbk  code
  SCHEDULED: <2021-08-06     >

** words

*** retval          

*** index               

*** routine          

*** uncast     


*** primary                


** code
*** code  UI_vendor_model_set


*** MS_access_cm_set_primary_unicast_address  /            /

* extren
  SCHEDULED: <2021-08-09    >

** extren

***     extren                                                 
    SCHEDULED: <2021-08-10    >


*         
  SCHEDULED: <2021-08-10    >

**         

***               

*** extern                 

*** static                         

***     case GAP_LINK_TERMINATED_EVENT:
**         

***          *          *

****         

****         


* bbk         
  SCHEDULED: <2021-08-11     >

**  blebrr_disconnect_pl();
    if (events & BLEMESH_GAP_TERMINATE)
    {
        blebrr_disconnect_pl();
        return (events ^ BLEMESH_GAP_TERMINATE);
    }

**     case GAP_LINK_TERMINATED_EVENT:
    {
        gapTerminateLinkEvent_t* pPkt = (gapTerminateLinkEvent_t*)pMsg;
        /* printf("\r\n GAP_LINK_TERMINATED_EVENT received! \r\n"); */
        blebrr_handle_le_disconnection_pl
        (
            0x00, /* Dummy Static Connection Index */
            pPkt->connectionHandle,
            pPkt->reason
        );
    }

**         

***     if (NULL != value)
    {
        BLEBRRPL_LOG("Mesh Proxy Data IN received");
        //appl_dump_bytes(value, length);
        blebrr_recv_mesh_packet_pl
        (
            &conn_hndl,
            offset,
            value,
            length
        );
    }
**   UI_proxy_start_adv(0x0000, MS_PROXY_NODE_ID_ADV_MODE);
if (API_SUCCESS == UI_sample_check_app_key())
        {
            UI_sample_get_device_key();

            if (MS_ENABLE == state)
            {
                light_blink_set(LIGHT_GREEN, LIGHT_BLINK_FAST,5);
                //for silab 2.0.0 app use NODE ID
                CONSOLE_OUT("\r\n Provisioned Device - Starting Proxy with NODE ID on Subnet 0x0000!\r\n");
                UI_proxy_start_adv(0x0000, MS_PROXY_NODE_ID_ADV_MODE);
                #if (CFG_HEARTBEAT_MODE)

                if(ms_provisioner_addr != 0)
                {
                    printf("sub ms_provisioner_addr 0x%04X\n",ms_provisioner_addr);
                    UI_trn_set_heartbeat_subscription(ms_provisioner_addr);
                }
** UI_gatt_iface_event_pl_cb
***    case BLEBRR_GATT_IFACE_DOWN:
        CONSOLE_OUT("\r\n >> GATT Bearer BLE Link Layer Disconnection Event Received!\r\n");
        osal_stop_timerEx(bleMesh_TaskID, BLEMESH_GAP_TERMINATE);

        //UI_sample_reinit();
        if(thandle == EM_TIMER_HANDLE_INIT_VAL)
        {
            EM_start_timer (&thandle, 3, timeout_cb, NULL, 0);
        }

        break;
** over gatt
      if (MS_TRUE == is_prov_req)
    {
        /* Start Provisioning over GATT here */
        /**
            setup <role:[1 - Device, 2 - Provisioner]> <bearer:[1 - Adv, 2 - GATT]
        */
        role = PROV_ROLE_DEVICE;
        brr  = PROV_BRR_GATT|PROV_BRR_ADV;  //PROV_BRR_ADV,PROV_BRR_GATT
        printf("Bearer type = 0x%02X(Bit0-adv, Bit1-GATT)\r\n", brr);
//        UI_prov_brr_handle = brr;
        /**
            Setting up an Unprovisioned Device over GATT
        */
        LIGHT_ONLY_RED_ON;
        blebrr_prov_started = MS_FALSE;
        UI_setup_prov(role, brr);
//        UI_prov_bind(brr, 0x00);
        //ms_access_ps_store(MS_PS_RECORD_SEQ_NUMBER);
        CONSOLE_OUT("\r\n Setting up as an Unprovisioned Device\r\n");
    }
**   mesh
       if (0xFF != flag)
    {
        blebrr_disable_mesh_serv_pl(curr_service);
        blebrr_enable_mesh_serv_pl(flag);
        curr_service = flag;
    }
***   UI_setup_prov(role, brr);
**    blebrr_init_pl();        
       if (PROV_ROLE_PROVISIONER != role)
    {
        CONSOLE_OUT("Setting up Device for Provisioning ...\n");
        retval = MS_prov_setup
                 (
                     brr,
                     role,
                     &UI_lprov_device,
                     UI_PROV_SETUP_GATT_MSECS,
                     UI_PROV_SETUP_ADV_MSECS
                 );
        UI_prov_role = PROV_ROLE_DEVICE;
    }

**  iface enable

   case BLEBRR_GATT_IFACE_ENABLE:
        CONSOLE_OUT("\r\n >> GATT Bearer Active Event Received!\r\n");
        {
            if (BLEBRR_GATT_PROV_MODE == ev_param)
            {
                /* Call to bind with the selected device */
                UI_prov_brr_handle = PROV_BRR_GATT;
                UI_prov_bind(PROV_BRR_GATT, 0);
            }
        }
        break;

**
    if (MS_TRUE == is_prov_req)
    {
        /* Start Provisioning over GATT here */
        /**
             setup <role:[1 - Device, 2 - Provisioner]> <bearer:[1 - Adv, 2 - GATT]
        */
        role = PROV_ROLE_DEVICE;
        brr  = PROV_BRR_GATT|PROV_BRR_ADV;  //PROV_BRR_ADV,PROV_BRR_GATT
        printf("Bearer type = 0x%02X(Bit0-adv, Bit1-GATT)\r\n", brr);
//        UI_prov_brr_handle = brr;
        /**
            Setting up an Unprovisioned Device over GATT
        */
        LIGHT_ONLY_RED_ON;
        blebrr_prov_started = MS_FALSE;
        UI_setup_prov(role, brr);
//        UI_prov_bind(brr, 0x00);
        //ms_access_ps_store(MS_PS_RECORD_SEQ_NUMBER);
        CONSOLE_OUT("\r\n Setting up as an Unprovisioned Device\r\n");
    }
      case HCI_DISCONNECTION_COMPLETE_EVENT_CODE:
            gapProcessDisconnectCompleteEvt( (hciEvt_DisconnComplete_t*)pMsg );
            break;

** 操作系统

*** 执行上下文称为进程的状态，是操作系统管理和控制所需的内部数据。用来管理进程

* mesh 配网
  SCHEDULED: <2021-08-12 周四>

** bbb_sdk


** 协议

** words

*** msecs 毫秒

*** expire 期满

** python

*** import
    相对导入和绝对导入
    import as 取别名
    form import

*** def 函数

**** 默认参数值=  跟重载差不多

**** *修饰可变藏书

**** **修饰关键字参数  任意个参数自动封装成一个字典

**** global a 声此变量是全局变量

*** title()
    返回一个标题话的字符串

*** items() 返回可遍历的元素组

*** time.perf_counter()
    返回当前系统时间  一般用于计算程序运行时间

*** range()
    返回一个迭代对象（类型是对象）
